cdf
x <- seq(0.1, 0.9, length.out = 9)
length(x)
whatev <- numeric(9)
whatev
x
# Problem 4
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- numeric(length(x))
MC_Est_Beta <- numeric(length(x))
for (i in x)
{
Real_Beta[i] <- pbeta(i, 2, 2)
MC_Est_Beta[i] <- mybeta.mc(1000, 2, 2, i)
}
print(rbind(x, Real_Beta, MC_Est_Beta))
gen <- rbeta(1000, 2, 2)
g <- (gen < 0.9)
cdf <- mean(g)
cdf
pbeta(0.9,2,2)
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- numeric(length(x))
MC_Est_Beta <- numeric(length(x))
for (i in x)
{
Real_Beta(i) <- pbeta(i, 2, 2)
MC_Est_Beta(i) <- mybeta.mc(1000, 2, 2, i)
}
print(rbind(x, Real_Beta, MC_Est_Beta))
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- numeric(length(x))
MC_Est_Beta <- numeric(length(x))
for (i in x)
{
Real_Beta <- Real_Beta[, pbeta(i, 2, 2)]
MC_Est_Beta(i) <- mybeta.mc(1000, 2, 2, i)
}
print(rbind(x, Real_Beta, MC_Est_Beta))
# Problem 4
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- numeric(length(x))
MC_Est_Beta <- numeric(length(x))
for (i in x)
{
Real_Beta <- Real_Beta[pbeta(i, 2, 2), ]
MC_Est_Beta(i) <- mybeta.mc(1000, 2, 2, i)
}
print(rbind(x, Real_Beta, MC_Est_Beta))
# Problem 4
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- list()
MC_Est_Beta <- list()
for (i in x)
{
Real_Beta <- cbind(Real_Beta, pbeta(i, 2, 2))
MC_Est_Beta(i) <- cbind(MC_Est_Beta, mybeta.mc(1000, 2, 2, i))
}
print(rbind(x, Real_Beta, MC_Est_Beta))
## Homework 3
# Problem 1
twosample.proptest <- function(succ, n, type = "z")
{
succ1 <- succ[1]
succ2 <- succ[2]
n1 <- n[1]
n2 <- n[2]
p1.hat <- succ1/n1
p2.hat <- succ2/n2
p.hat <- (succ1 + succ2)/(n1 + n2)
test.stat.denom <- sqrt(p.hat*(1 - p.hat)*(1/n1 + 1/n2))
test.stat <- (p1.hat - p2.hat)/test.stat.denom
p.value <- 2*(1 - pnorm(abs(test.stat)))
if (type == "z")
{
output <- list(TS=test.stat, stat.type=type, p.val=p.value, sample.est=c(p1.hat, p2.hat))
return(output)
}
else
{
output <- list(TS=test.stat^2, stat.type=type, p.val=p.value, sample.est=c(p1.hat, p2.hat))
return(output)
}
}
print(twosample.proptest(c(23, 25), c(40, 50)))
print(twosample.proptest(c(23, 25), c(40, 50), type = "chisq"))
prop.test(c(23, 25), c(40, 50), correct = FALSE)
p.set.1 <- c(0.80, 0.25)
p.set.2 <- c(0.45, 0.55)
p.set.3 <- c(0.4, 0.4)
res.mat <- list()
for(n in c(10^2, 10^4, 10^6 ))
{
b1 <- rbinom(1, n, p.set.1[1])
b2 <- rbinom(1, n, p.set.1[2])
output1 <- twosample.proptest(c(b1, b2), c(n, n))
pval1 <- output1$p.val
b3 <- rbinom(1, n, p.set.2[1])
b4 <- rbinom(1, n, p.set.2[2])
output2 <- twosample.proptest(c(b3, b4), c(n, n))
pval2 <- output2$p.val
b5 <- rbinom(1, n, p.set.3[1])
b6 <- rbinom(1, n, p.set.3[2])
output3 <- twosample.proptest(c(b5, b6), c(n, n))
pval3 <- output3$p.val
n <- c(pval1, pval2, pval3)
res.mat <- cbind(res.mat, n)
}
pval.table <- as.table(res.mat)
pval.table
whatev <- list()
for(w in 1:10)
{
whatev <- cbind(whatev, whatev+1)
}
{
whatev <- cbind(whatev, 5)
}
for(w in 1:10){}
for(w in 1:10){whatev <- cbind(whatev, 5)}
whatev
whatev <- list()
for(w in 1:10){whatev <- cbind(whatev, w)}
whatev
# Problem 4
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- list()
MC_Est_Beta <- list()
for (i in x)
{
Real_Beta <- cbind(Real_Beta, pbeta(i, 2, 2))
MC_Est_Beta <- cbind(MC_Est_Beta, mybeta.mc(1000, 2, 2, i))
}
print(rbind(x, Real_Beta, MC_Est_Beta))
print(rbind(Real_Beta,x, MC_Est_Beta))
print(rbind(Real_Beta, MC_Est_Beta))
# Problem 4
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
R <- list()
MC_Est_Beta <- list()
for (i in x)
{
R <- cbind(R, pbeta(i, 2, 2))
MC_Est_Beta <- cbind(MC_Est_Beta, mybeta.mc(1000, 2, 2, i))
}
print(rbind(x, R, MC_Est_Beta))
# Problem 4
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
R <- list()
MC_Est_Beta <- list()
for (i in x)
{
R <- cbind(R, pbeta(i, 2, 2))
MC_Est_Beta <- cbind(MC_Est_Beta, mybeta.mc(1000, 2, 2, i))
}
print(rbind(x, R, MC_Est_Beta))
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- list()
MC_Est_Beta <- list()
for (i in x)
{
Real_Beta <- cbind(Real_Beta, pbeta(i, 2, 2))
MC_Est_Beta <- cbind(MC_Est_Beta, mybeta.mc(1000, 2, 2, i))
}
print(rbind(x, Real_Beta, MC_Est_Beta))
library(rmutil)
n <- 100
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 100
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 100
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 10
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 10
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 1, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 1)
lines(y, a*b*y^(-(a+1)))
# Problem 3
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 1, 1)
lines(y, a*b*y^(-(a+1)))
# Problem 3
library(rmutil)
n <- 10
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 10000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
# Problem 2
library(ISwR)
attach(cystfibr)
head(cystfibr)
n <- nrow(cystfibr)
cv.err.1 <- cv.err.2 <- cv.err.3 <- numeric(n)
for (j in 1:n)
{
y <- pemax[-j]
x.1 <- age[-j]
x.2 <- sex[-j]
x.3 <- weight[-j]
x.4 <- bmp[-j]
x.5 <- fev1[-j]
x.6 <- rv[-j]
x.7 <- frc[-j]
x.8 <- tlc[-j]
x.9 <- height[-j]
#first model
lm.1 <- lm(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8)
yhat.1 <- lm.1$coef[1] + lm.1$coef[2]*age[j] + lm.1$coef[3]*sex[j] + lm.1$coef[4]*weight[j] + lm.1$coef[5]*bmp[j] + lm.1$coef[6]*fev1[j] + lm.1$coef[7]*rv[j] + lm.1$coef[8]*frc[j] + lm.1$coef[9]*tlc[j]
cv.err.1[j] <- (pemax[j] - yhat.1)
#second model
lm.2 <- lm(y~x.1+x.2+x.9+x.3+x.4)
yhat.2 <- lm.2$coef[1] + lm.2$coef[2]*age[j] + lm.2$coef[3]*sex[j] + lm.2$coef[4]*height[j] + lm.2$coef[5]*weight[j] + lm.2$coef[6]*bmp[j]
cv.err.2[j] <- (pemax[j] - yhat.2)
#third model
lm.3 <- lm(y~x.1+x.2+x.5+x.6+x.7+x.8)
yhat.3 <- lm.3$coef[1] + lm.3$coef[2]*age[j] + lm.3$coef[3]*sex[j] + lm.3$coef[4]*fev1[j] + lm.3$coef[5]*rv[j] + lm.3$coef[6]*frc[j] + lm.3$coef[7]*tlc[j]
cv.err.3[j] <- (pemax[j] - yhat.3)
}
print(c(mean(cv.err.1^2), mean(cv.err.2^2), mean(cv.err.3^2)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
install.packages(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
library(rmutil)
n <- 1000
a <- 2
b <- 2
u <- runif(n)
x <- b/((1-u)^1/a)
hist(x, probability = TRUE, main = 'Pareto Distribution')
y <- seq(0, 100, 0.1)
lines(y, a*b*y^(-(a+1)))
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- list()
MC_Est_Beta <- list()
for (i in x)
{
Real_Beta <- cbind(Real_Beta, pbeta(i, 2, 2))
MC_Est_Beta <- cbind(MC_Est_Beta, mybeta.mc(1000, 2, 2, i))
}
print(rbind(x, Real_Beta, MC_Est_Beta))
mybeta.mc <- function(m, a, b, x)
{
gen <- rbeta(1000, 2, 2)
g <- (gen < x)
cdf <- mean(g)
return(cdf)
}
x <- seq(0.1, 0.9, length.out = 9)
Real_Beta <- list()
MC_Est_Beta <- list()
for (i in x)
{
Real_Beta <- cbind(Real_Beta, pbeta(i, 2, 2))
MC_Est_Beta <- cbind(MC_Est_Beta, mybeta.mc(1000, 2, 2, i))
}
print(rbind(x, Real_Beta, MC_Est_Beta))
gen.norm <- function(n, mu, sdev)
{
num <- rnorm(n, mean = mu, sd = sdev);
sample.mean <- mean(num)
sample.var <- var(num)
sample.median <- median(num)
sample.99q <- qnorm(0.99, sample.mean, sd(num))
mean.dif <- abs(sample.mean - mu)
var.dif <- abs(sample.var - sdev^2)
median.dif <- abs(sample.median - qnorm(0.5, mu, sdev))
q99.dif <- abs(sample.99q - qnorm(0.99, mu, sdev))
prob <- pnorm(sample.median, mean = sample.mean, sd = sd(num))
norm.table <- matrix(c(mean.dif, var.dif, median.dif, q99.dif, prob), ncol = 5, byrow = T)
colnames(norm.table) <- c("mean.dif", "var.dif", "median.dif", "q99.dif", "prob");
norm.table <- as.table(norm.table)
return(norm.table)
}
diamond.data <- read.csv("test_Homework_4.csv")
setwd("D:\Apple Assignment\apple_assignment")
project1.data <- read.csv("Table of ratios.csv")
attach(project1.data)
head(project1.data)
setwd("D:\Apple Assignment\apple_assignment")
setwd("D:/Apple Assignment/apple_assignment")
project1.data <- read.csv("Table of Ratios.csv")
attach(project1.data)
head(project1.data)
help("t.test")
setwd("D:/Apple Assignment/apple_assignment")
project1.data <- read.csv("Table of Ratios.csv")
attach(project1.data)
head(project1.data)
t.test(Ratios, mu = 0.43)
